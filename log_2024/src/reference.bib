@inproceedings{Kipf:2017tc,
author = {Kipf, Thomas N. and Welling, Max},
title = {{Semi-Supervised Classification with Graph Convolutional Networks}},
booktitle = {ICLR},
year = {2017}
}

@inproceedings{Velickovic:2018we,
author = {Veli{\v c}kovi{\'c}, Petar and Cucurull, Guillem and Casanova, Arantxa and Romero, Adriana and Li{\`o}, Pietro and Bengio, Yoshua},
title = {{Graph Attention Networks}},
booktitle = {ICLR},
year = {2018}
}

@inproceedings{Hamilton:2017tp,
author = {Hamilton, William L. and Ying, Zhitao and Leskovec, Jure},
title = {{Inductive Representation Learning on Large Graphs}},
booktitle = {NIPS},
year = {2017},
pages = {1024--1034},
}

@inproceedings{bernado-domingos:2016, author = {Bernardo, V\'{\i}tor and Domingos, Dulce}, title = {Web-based Fingerprinting Techniques}, year = {2016}, isbn = {9789897581960}, publisher = {SCITEPRESS - Science and Technology Publications, Lda}, address = {Setubal, PRT}, url = {https://doi.org/10.5220/0005965602710282}, doi = {10.5220/0005965602710282}, abstract = {The concept of device fingerprinting is based in the assumption that each electronic device holds a unique setof physical and/or logical features that others can capture and use to differentiate it from the whole. Web-basedfingerprinting, a particular case of device fingerprinting, allows website owners to differentiate devices basedon the set of information that browsers transmit. Depending on the techniques being used, a website can tracka device based on its browser features (browser fingerprinting) or based on system settings (cross-browserfingerprinting). The latter allows identification of the device even when more than one browser is used.Several different works have introduced new techniques over the last years proving that fingerprinting can bedone in multiple ways, but there is not a consolidated work gathering all of them. The current work identifiesknown web-based fingerprinting techniques, categorizing them as which ones are browser and which arecross-browser and showing real examples of the data that can be captured with each technique. The study issynthesized in a taxonomy, which provides a clear separation between techniques, making it easier to identifythe threats to security and privacy inherent to each one.}, booktitle = {Proceedings of the 13th International Joint Conference on E-Business and Telecommunications}, pages = {271–282}, numpages = {12}, keywords = {Browser Fingerprinting, Cross-browser Fingerprinting, Device Fingerprinting, Fingerprint., Privacy}, location = {Lisbon, Portugal}, series = {ICETE 2016}
}

@misc{kumar-anthony-banga-sohal:2024,
      title={PhishNet: A Phishing Website Detection Tool using XGBoost}, 
      author={Kumar, Prashant and Antony, Kevin and Banga, Deepakmoney and Sohal, Arshpreet},
      year={2024},
      eprint={2407.04732},
      archivePrefix={arXiv},
      primaryClass={cs.CR},
      url={https://arxiv.org/abs/2407.04732}, 
}

@book{gusfield:1997,
author = {Gusfield, Dan},
title = {Algorithms on strings, trees, and sequences: computer science and computational biology},
year = {1997},
isbn = {0521585198},
publisher = {Cambridge University Press},
address = {USA}
}

@article{ukkonen:1995,
author = {Ukkonen, Esko},
title = {On-line construction of suffix trees},
year = {1995},
issue_date = {September 1995},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
volume = {14},
number = {3},
issn = {0178-4617},
url = {https://doi.org/10.1007/BF01206331},
doi = {10.1007/BF01206331},
abstract = {An on-line algorithm is presented for constructing the suffix tree for a given string in time linear in the length of the string. The new algorithm has the desirable property of processing the string symbol by symbol from left to right. It always has the suffix tree for the scanned part of the string ready. The method is developed as a linear-time version of a very simple algorithm for (quadratic size) suffixtries. Regardless of its quadratic worst case this latter algorithm can be a good practical method when the string is not too long. Another variation of this method is shown to give, in a natural way, the well-known algorithms for constructing suffix automata (DAWGs).},
journal = {Algorithmica},
month = {sep},
pages = {249–260},
numpages = {12},
keywords = {DAWG, Linear-time algorithm, Suffix automaton, Suffix tree, Suffix trie}
}

@inproceedings{leis-kemper-neumann:2013,
author = {Leis, Viktor and Kemper, Alfons and Neumann, Thomas},
title = {The adaptive radix tree: ARTful indexing for main-memory databases},
year = {2013},
isbn = {9781467349093},
publisher = {IEEE Computer Society},
address = {USA},
url = {https://doi.org/10.1109/ICDE.2013.6544812},
doi = {10.1109/ICDE.2013.6544812},
abstract = {Main memory capacities have grown up to a point where most databases fit into RAM. For main-memory database systems, index structure performance is a critical bottleneck. Traditional in-memory data structures like balanced binary search trees are not efficient on modern hardware, because they do not optimally utilize on-CPU caches. Hash tables, also often used for main-memory indexes, are fast but only support point queries. To overcome these shortcomings, we present ART, an adaptive radix tree (trie) for efficient indexing in main memory. Its lookup performance surpasses highly tuned, read-only search trees, while supporting very efficient insertions and deletions as well. At the same time, ART is very space efficient and solves the problem of excessive worst-case space consumption, which plagues most radix trees, by adaptively choosing compact and efficient data structures for internal nodes. Even though ART's performance is comparable to hash tables, it maintains the data in sorted order, which enables additional operations like range scan and prefix lookup.},
booktitle = {Proceedings of the 2013 IEEE International Conference on Data Engineering (ICDE 2013)},
pages = {38–49},
numpages = {12},
series = {ICDE '13}
}

@article{morrison:1968,
author = {Morrison, Donald R.},
title = {{PATRICIA} — Practical Algorithm To Retrieve Information Coded in Alphanumeric},
year = {1968},
issue_date = {Oct. 1968},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {15},
number = {4},
issn = {0004-5411},
url = {https://doi.org/10.1145/321479.321481},
doi = {10.1145/321479.321481},
abstract = {PATRICIA is an algorithm which provides a flexible means of storing, indexing, and retrieving information in a large file, which is economical of index space and of reindexing time. It does not require rearrangement of text or index as new material is added. It requires a minimum restriction of format of text and of keys; it is extremely flexible in the variety of keys it will respond to. It retrieves information in response to keys furnished by the user with a quantity of computation which has a bound which depends linearly on the length of keys and the number of their proper occurrences and is otherwise independent of the size of the library. It has been implemented in several variations as FORTRAN programs for the CDC-3600, utilizing disk file storage of text. It has been applied to several large information-retrieval problems and will be applied to others.},
journal = {J. ACM},
month = {oct},
pages = {514–534},
numpages = {21}
}

@article{dean-dhemawhat:2008, author = {Dean, Jeffrey and Ghemawat, Sanjay}, title = {MapReduce: simplified data processing on large clusters}, year = {2008}, issue_date = {January 2008}, publisher = {Association for Computing Machinery}, address = {New York, NY, USA}, volume = {51}, number = {1}, issn = {0001-0782}, url = {https://doi.org/10.1145/1327452.1327492}, doi = {10.1145/1327452.1327492}, abstract = {MapReduce is a programming model and an associated implementation for processing and generating large datasets that is amenable to a broad variety of real-world tasks. Users specify the computation in terms of a map and a reduce function, and the underlying runtime system automatically parallelizes the computation across large-scale clusters of machines, handles machine failures, and schedules inter-machine communication to make efficient use of the network and disks. Programmers find the system easy to use: more than ten thousand distinct MapReduce programs have been implemented internally at Google over the past four years, and an average of one hundred thousand MapReduce jobs are executed on Google's clusters every day, processing a total of more than twenty petabytes of data per day.}, journal = {Commun. ACM}, month = {jan}, pages = {107–113}, numpages = {7} }

@inproceedings{pennington-socher-manning:2014,
    title = {{G}lo{V}e: Global Vectors for Word Representation},
    author = {Pennington, Jeffrey  and Socher, Richard  and Manning, Christopher},
    editor = {Moschitti, Alessandro  and Pang, Bo  and Daelemans, Walter},
    booktitle = "Proceedings of the 2014 Conference on Empirical Methods in Natural Language Processing ({EMNLP})",
    month = oct,
    year = "2014",
    address = "Doha, Qatar",
    publisher = "Association for Computational Linguistics",
    url = "https://aclanthology.org/D14-1162",
    doi = "10.3115/v1/D14-1162",
    pages = "1532--1543",
}

@article{wu-pan-chen-long-zhang-yu:2021,
  author={Wu, Zonghan and Pan, Shirui and Chen, Fengwen and Long, Guodong and Zhang, Chengqi and Yu, Philip S.},
  journal={IEEE Transactions on Neural Networks and Learning Systems}, 
  title={A Comprehensive Survey on Graph Neural Networks}, 
  year={2021},
  volume={32},
  number={1},
  pages={4-24},
  keywords={Deep learning;Neural networks;Task analysis;Kernel;Feature extraction;Data mining;Learning systems;Deep learning;graph autoencoder (GAE);graph convolutional networks (GCNs);graph neural networks (GNNs);graph representation learning;network embedding},
  doi={10.1109/TNNLS.2020.2978386}}

  @misc{nicholas:2024,
  title = {Types of Social Engineering Attacks: Detecting the Latest Scams},
  howpublished = {\url{https://www.biocatch.com/blog/types-social-engineering-attacks}},
  note = {Accessed: 2024-09-01}
}

@misc{stanley:2023,
  title = {Sidestep Social Engineering Scams},
  howpublished = {\url{https://www.morganstanley.com/articles/social-engineering-fraud}},
  note = {Accessed: 2024-09-01}
}
